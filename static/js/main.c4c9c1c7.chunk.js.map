{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/Counters.jsx","components/Fcc.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Counter","handleincrement","product","console","log","_this","setState","value","props","counter","this","_this2","react_default","a","createElement","className","getBadgeClass","incrementer","onClick","id","onDelete","classes","Component","Counters","state","counters","handleDelete","counterid","filter","c","handeReset","map","handleReset","components_counter","key","Fcc","ReactDOM","render","components_Counters","document","getElementById","components_Fcc","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCsBSC,6MAjCbC,gBAAkB,SAAAC,GAChBC,QAAQC,IAAIF,GACZG,EAAKC,SAAS,CAAEC,MAAQF,EAAKG,MAAMC,QAAQF,OAAS,kFAPxC,IACJA,EAAUG,KAAKF,MAAMC,QAArBF,MACR,OAAiB,IAAVA,EAAc,OAASA,mCAQvB,IAAAI,EAAAD,KACP,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWL,KAAKM,iBAAkBN,KAAKO,eAC7CL,EAAAC,EAAAC,cAAA,UACEC,UAAU,2BACVG,QAAS,WACPP,EAAKV,gBAAgB,CAAEkB,GAAI,MAH/B,aAQAP,EAAAC,EAAAC,cAAA,UACEI,QAAS,kBAAMP,EAAKH,MAAMY,SAAST,EAAKH,MAAMC,QAAQU,KACtDJ,UAAU,6BAFZ,mDAWJ,IAAIM,EAAU,mBAEd,OADAA,GAAwC,IAA7BX,KAAKF,MAAMC,QAAQF,MAAc,UAAY,iBAnCtCe,aCwCPC,6MAtCbC,MAAQ,CACNC,SAAU,CACR,CAAEN,GAAI,EAAGZ,MAAO,GAChB,CAAEY,GAAI,EAAGZ,MAAO,GAChB,CAAEY,GAAI,EAAGZ,MAAO,GAChB,CAAEY,GAAI,EAAGZ,MAAO,OAGpBmB,aAAe,SAAAC,GACb,IAAMF,EAAWpB,EAAKmB,MAAMC,SAASG,OAAO,SAAAC,GAAC,OAAIA,EAAEV,KAAOQ,IAC1DtB,EAAKC,SAAS,CAAEmB,gBAElBK,WAAa,WACXzB,EAAKmB,MAAMC,SAASM,IAAI,SAAAF,GAEtB,OADAA,EAAEtB,MAAQ,EACHsB,6EAGF,IAAAlB,EAAAD,KACP,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEC,UAAU,6BACVG,QAASR,KAAKsB,aAFhB,SAMCtB,KAAKc,MAAMC,SAASM,IAAI,SAAAtB,GAAO,OAC9BG,EAAAC,EAAAC,cAACmB,EAAD,CACEC,IAAKzB,EAAQU,GACbC,SAAUT,EAAKe,aACfjB,QAASA,cAhCEa,aCYRa,mLAXX,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,kBAPQO,aCQlBc,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAAcC,SAASC,eAAe,SACtDJ,IAASC,OAAOzB,EAAAC,EAAAC,cAAC2B,EAAD,MAASF,SAASC,eAAe,UJuH3C,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCKnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c4c9c1c7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nclass Counter extends Component {\r\n  incrementer() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n\r\n  handleincrement = product => {\r\n    console.log(product);\r\n    this.setState({ value: (this.props.counter.value += 1) });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClass()}>{this.incrementer()}</span>\r\n        <button\r\n          className=\"btn btn-secondary btn-lr\"\r\n          onClick={() => {\r\n            this.handleincrement({ id: 1 });\r\n          }}\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-sm btn-danger m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClass() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n}\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, value: 4 },\r\n      { id: 2, value: 0 },\r\n      { id: 3, value: 0 },\r\n      { id: 4, value: 0 }\r\n    ]\r\n  };\r\n  handleDelete = counterid => {\r\n    const counters = this.state.counters.filter(c => c.id !== counterid);\r\n    this.setState({ counters });\r\n  };\r\n  handeReset = () => {\r\n    this.state.counters.map(c => {\r\n      c.value = 0;\r\n      return c;\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"btn btn-sm btn-primary m-2\"\r\n          onClick={this.handleReset}\r\n        >\r\n          Reset\r\n        </button>\r\n        {this.state.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={this.handleDelete}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nclass Fcc extends Component {\n  render() {\n    return (\n      <div>\n        <ul className=\"\">\n          <li className=\"list-group-item-primary\">First</li>\n          <li className=\"list-group-item-secondary\">Second</li>\n          <li className=\"list-group-item-success\">Third</li>\n        </ul>\n      </div>\n    );\n  }\n}\nexport default Fcc;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Counters from \"./components/Counters\";\r\nimport Fcc from \"./components/Fcc\";\r\n\r\nReactDOM.render(<Counters />, document.getElementById(\"root\"));\r\nReactDOM.render(<Fcc />, document.getElementById(\"root3\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}