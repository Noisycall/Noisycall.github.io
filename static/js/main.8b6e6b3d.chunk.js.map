{"version":3,"sources":["logo.svg","serviceWorker.js","components/Header.jsx","components/Intro.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Header","react_default","a","createElement","className","role","type","Component","Intro","style","fontFamily","height","Badge","variant","badgeContent","color","Button","ReactDOM","render","components_Header","document","getElementById","components_Intro","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6MCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6GCQSC,mLAvBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAhB,0BACAH,EAAAC,EAAAC,cAAA,QACEC,UAAU,6CACVC,KAAK,SAELJ,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,mBAAhC,SAGAH,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,mBAAhC,YAGAH,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,mBAAhC,qBAhBSG,qCC2BNC,mLAtBX,OACEP,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CAAEC,WAAY,qBACxBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOK,MAAO,CAAEE,OAAQ,QACrCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0DAAd,6EAIAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aACXH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,QAAQ,MAAMC,aAAc,cAAeC,MAAM,WACtDd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQH,QAAQ,YAAYE,MAAM,WAAlC,qBAZIR,aCKpBU,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAAWC,SAASC,eAAe,SACnDJ,IAASC,OAAOjB,EAAAC,EAAAC,cAACmB,EAAD,MAASF,SAASC,eAAe,UHuH3C,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8b6e6b3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <span className=\"h3\">Welcome to Coders Era!</span>\n          <span\n            className=\"btn-group-sm m-1 float-right sm-float-none\"\n            role=\"group\"\n          >\n            <button type=\"button\" className=\"btn btn-primary\">\n              About\n            </button>\n            <button type=\"button\" className=\"btn btn-primary\">\n              Projects\n            </button>\n            <button type=\"button\" className=\"btn btn-primary\">\n              MIT WPU\n            </button>\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React, {Component} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Badge from \"@material-ui/core/Badge\"\n\nclass Intro extends Component {\n  render() {\n    return (\n      <div style={{ fontFamily: \"Source Code Sans\" }}>\n        <div className=\"card\" style={{ height: \"10%\" }}>\n          <div className=\"card-body border border-primary\">\n            <h4 className=\"card-title text-center font-weight-light text-black-50\">\n              Coders Era, a place for all computerphiles to learn,improve and\n              have fun!\n            </h4>\n            <p className=\"card-text\">\n              <Badge variant=\"dot\" badgeContent={\"hello there\"} color=\"primary\">\n                <Button variant=\"contained\" color=\"default\">\n                  Hello\n                </Button>\n              </Badge>\n\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Intro;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Header from \"./components/Header\";\r\nimport { removeDotSegments } from \"uri-js\";\r\nimport Intro from \"./components/Intro\";\r\nReactDOM.render(<Header/>, document.getElementById(\"root\"));\r\nReactDOM.render(<Intro/>,document.getElementById(\"root2\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}